generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum Role {
    USER
    ADMIN
    UPLOADER
}

enum Type {
    MANGA
    NOVEL
}

model User {
    id           String    @id @default(cuid())
    username     String    @unique
    password     String
    owned_novels Novel[]
    role         Role      @default(USER)
    chapter      Chapter[]

    @@map("users")
}

model Novel {
    id         String   @id @default(cuid())
    title      String
    slug       String   @unique
    sinopse    String   @db.Text
    views      Int      @default(0)
    image_url  String   @default("http://www.cams-it.com/wp-content/uploads/2015/05/default-placeholder-200x200.png")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    status     String   @default("ongoing")
    author     String?
    type       Type     @default(NOVEL)

    user      User             @relation(fields: [user_id], references: [id])
    origin    Origin           @relation(fields: [origin_id], references: [id])
    chapter   Chapter[]
    genres    GenresOnNovels[]
    user_id   String
    origin_id String
}

model Origin {
    id     String  @id @default(cuid())
    slug   String  @unique
    name   String
    novels Novel[]

    @@map("origins")
}

model Genre {
    id     String           @id @default(cuid())
    slug   String           @unique
    name   String
    novels GenresOnNovels[]

    @@map("genres")
}

model GenresOnNovels {
    id String @id @default(cuid())

    novel    Novel  @relation(fields: [novel_id], references: [id], onDelete: Cascade)
    genre    Genre  @relation(fields: [genre_id], references: [id], onDelete: Cascade)
    novel_id String
    genre_id String

    @@unique([novel_id, genre_id])
    @@map("genres_on_novels")
}

model Chapter {
    id         String   @id @default(cuid())
    title      String?
    slug       String   @unique
    volume     Int
    chapter    Float
    content    String?  @db.Text
    pages      Page[]
    views      Int      @default(0)
    created_at DateTime @default(now())
    novel      Novel    @relation(fields: [novel_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    novel_id   String
    user       User     @relation(fields: [user_id], references: [id])
    user_id    String

    @@map("chapters")
}

model Page {
    id               String  @id @default(cuid())
    url              String
    number_page      Int
    manga_chapter    Chapter @relation(fields: [manga_chapter_id], references: [id], onDelete: Cascade)
    manga_chapter_id String
}
